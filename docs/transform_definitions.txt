"""
transform_definitions.txt

Copyright 2016 University of Melbourne.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and limitations under the License.
"""
Transform definitions

the _transform module maps each named transform to its input and output classes so that calling
transform( <input_instance>, <output_class> ) will match to the required transform module
in /fourdvar/transfunc and return the output instance requested

These transforms are:

condition:          (PhysicalData -> UnknownData)
-apply pre-conditioning to physical data and express information as a vector

uncondition:        (UnknownData -> PhysicalData)
-undo pre-conditioning and re-attach lost meta-data, inverse of condition

prepare_model:      (PhysicalData -> ModelInputData)
-convert into format used by the forward model (e.g: change resolution, create files etc.)

run_model:          (ModelInputData -> ModelOutputData)
-run the forward model, collect output into ModelOutputData class

obs_operator:       (ModelOutputData -> ObservationData)
-observation operator, created simulated observations based of model output

calc_forcing:       (ObservationData -> AdjointForcingData)
-produce input for adjoint model based off weighted residual of observations

run_adjoint:        (AdjointForcingData -> SensitivityData)
-run the adjoint of the forward model

map_sense:  	    (SensitivityData -> PhysicalAdjointData)
-convert output of adjoint model into Physical space

condition_adjoint:  (PhysicalAdjointData -> UnknownData)
-apply pre-conditioning to physical gradient data and express information as a vector
